# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct()
words = c("dog", "cat")
d4 %>%
filter(gloss %in% words)
d4 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences))
d4 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct()
d4 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct() %>%
group_by(speaker_role, gloss) %>%
filter(n_distinct(target_child_age) == 5)
d4 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct() %>%
group_by(speaker_role, gloss)
min_age = 12
max_age = 60
groupsize = 12
d4 %>%
filter(speaker_role=="Target_Child", between(target_child_age, min_age*30, max_age*30)) %>%
mutate(target_child_age = floor((target_child_age/30 - min_age) / groupsize) * groupsize + min_age) %>%
# group_by(speaker_role, target_child_age) %>%
mutate(total_tokens = sum(total_occurences))
d12 <- d4 %>%
filter(speaker_role=="Target_Child", between(target_child_age, min_age*30, max_age*30)) %>%
mutate(target_child_age = floor((target_child_age/30 - min_age) / groupsize) * groupsize + min_age) %>%
# group_by(speaker_role, target_child_age) %>%
mutate(total_tokens = sum(total_occurences))
d12 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences))
d12 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct()
d12 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct() %>%
group_by(speaker_role, gloss) %>%
filter(n_distinct(target_child_age) == 5)
d12 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct()
d12 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct()
n_distinct(d12$target_child_age)
d13 = d12 %>%
filter(gloss %in% words) %>%
# filter(gloss %in% words | grepl(input$regex, gloss)) %>%
group_by(speaker_role, target_child_age, gloss) %>%
#mutate(gloss_counts = sum(total_occurences)) %>%
mutate(gloss_counts = sum(total_occurences)) %>%
#ungroup() %>%
# group_by(speaker_role, gloss) %>%
#complete(nesting(gloss), target_child_age = range_seq()) %>%
#mutate(gloss_counts = ifelse(is.na(gloss_counts), 0, gloss_counts)) %>%
#group_by(speaker_role, target_child_age) %>%
#mutate(total_tokens = sum(total_occurences)) %>%
# summarise(total_tokens = sum(total_occurences), gloss_counts = sum(total_occurences[gloss==!!word]))
# select(-total_occurences, -target_child_sex) %>%
distinct() %>%
group_by(speaker_role, gloss)
d13 %>% filter(n_distinct(target_child_age) > 0)
d13 %>% filter(n_distinct(target_child_age) > 5)
d13 %>% filter(n_distinct(target_child_age) == 5)
d13 %>% filter(n_distinct(target_child_age) < 5)
d13 %>% filter(n_distinct(target_child_age) == 5)
filter(d13, gloss=="dog")
filter(d13, gloss=="dog") %>% n_distinct(.$target_child_age)
filter(d13, gloss=="dog")
n_distinct(filter(d13, gloss=="dog")$target_child_age)
distinct(filter(d13, gloss=="dog")$target_child_age)
distinct(filter(d13, gloss=="dog"), target_child_age)
d13 %>% filter(n_distinct(target_child_age) == 4)
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
regexpr("a+", "abc", perl=TRUE)
regexpr("a+", "abc", perl=TRUE)[1]
regexpr("a+", "def", perl=TRUE)[1]
regexpr("a+", "what lol", perl=TRUE)[1]
regexpr("a+", "whot lol", perl=TRUE)[1]
runApp('Github/shiny-app-childfreq')
regexpr("sandbox", "hi", perl=TRUE)
regexpr("sandbox", "hi", perl=TRUE)[1]
regexpr("sandbox", "sand", perl=TRUE)[1]
regexpr("sand", "sand", perl=TRUE)[1]
runApp('Github/shiny-app-childfreq')
runApp('Documents/app2')
runApp('Github/shiny-app-childfreq')
filtered_tbl()
read_csv("~/Documents/R/data/childfreq2.csv", col_types=cols(target_child_age="d"))
d4 = read_csv("~/Documents/R/data/childfreq2.csv", col_types=cols(target_child_age="d"))
d4 %>% filter(regexpr("dog", gloss, perl=TRUE)[1] != -1)
d4 %>% filter(regexpr("dog", gloss, perl=TRUE)[1] == -1)
regexpr("dog", "dog", perl=TRUE)
regexpr("dog", "dog", perl=TRUE)[1]
d4 %>% filter(regexpr("dog", as.character(gloss), perl=TRUE)[1] == -1)
d4 %>% filter(regexpr("dog", as.character(gloss), perl=TRUE)[1] != -1)
regexpr("dog", "dog", perl=TRUE)[1]
typeof(regexpr("dog", "dog", perl=TRUE)[1])
typeof(regexpr("dog", "dolg", perl=TRUE)[1])
regexpr("dog", "dolg", perl=TRUE)[1]
typeof(-1)
as.integer(-1)
typeof(as.integer(-1))
d4 %>% filter(regexpr("dog", as.character(gloss), perl=TRUE)[1] != as.integer(-1))
typeof(d4)
sapply(d4, class)
head(d4)
d4 %>% dplyr::filter(regexpr("dog", as.character(gloss), perl=TRUE)[1] != as.integer(-1))
regexpr("dog", d4$gloss, perl=TRUE)
d4 %>% dplyr::filter(regexpr("dog", as.character(gloss))[1] != as.integer(-1))
regexpr("dog", "dolg", perl=TRUE)[1]
regexpr("dog", "dog", perl=TRUE)[1]
d4 %>% dplyr::filter(regexpr("dog", gloss, perl=TRUE)[1] != as.integer(-1))
d4
d4 %>% dplyr::filter(regexpr("dog", gloss, perl=TRUE)[1] == as.integer(-1))
d4 %>% dplyr::filter(grepl("dog", gloss))
runApp('Github/shiny-app-childfreq')
d4 %>% dplyr::filter(grepl("dog", gloss)) %>% count()
d4 %>% dplyr::filter(grepl("dog", gloss)) %>% distinct(gloss)
d4 %>% dplyr::filter(grepl("balloon", gloss)) %>% distinct(gloss)
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
length("what")
length("")
"" == ""
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
runApp('Github/shiny-app-childfreq')
d = data.frame()
colnames(d) = c("adsf", "asdf")
d = data.frame((matrix(ncol = 5, nrow = 0))
colnames(d) = c("speaker_role", "target_child_age")
d = data.frame((matrix(ncol = 5, nrow = 0))
d = data.frame(matrix(ncol = 5, nrow = 0))
dog = data.frame(matrix(ncol = 5, nrow = 0))
colnames(dog) = c("speaker_role", "target_child_age")
dog
runApp('Github/shiny-app-childfreq')
rsconnect::deployApp('/Users/alessandro/Github/shiny-app-childfreq/childfreq')
rsconnect::deployApp('/Users/alessandro/Github/shiny-app-childfreq')
rsconnect::deployApp('/Users/alessandro/Github/shiny-app-childfreq')
rsconnect::deployApp('/Users/alessandro/Github/shiny-app-childfreq')
tokens <- read_csv("~/Documents/R/data/tokens3.csv")
prov_caregiver_tokens <- read_csv("~/Documents/R/data/providence_caregiver_tokens.csv")
ids <- c(1311, 1327, 1337, 1352, 1364, 1373)
# 1311 : Alex (min age = 17.1)
# 1327 : Ethan (min age = 11.1)
# 1337 : Lily (min age = 13.2)
# 1352 : Naima (min age = 11.9)
# 1364 : Violet (min age = 14.2)
# 1373 : William (min age = 16.6)
prov_tokens <- tokens %>%
filter(speaker_id %in% ids)
child <- 1337
count_df <- prov_tokens %>%
filter(speaker_id==child, stem != '',  speaker_age / 30 < 24) %>%
group_by(speaker_id, stem) %>%
summarise(stem_counts=n()) %>%
top_n(20, stem_counts) %>%
arrange(-stem_counts)
# ggplot(count_df, aes(reorder(stem, -stem_counts), stem_counts)) +
#   geom_bar(stat="identity") +
#   facet_wrap(~speaker_id) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
count_df2 <- prov_caregiver_tokens %>%
filter(target_child_id==child, stem != '',  target_child_age / 30 < 3000, speaker_role=="Mother") %>%
group_by(speaker_id, stem) %>%
summarise(stem_counts=n()) %>%
top_n(20, stem_counts)
#  mutate(quartile = ntile(stem_counts, 4)) %>%
# filter(quartile==3) %>%
# sample_n(size=6)
# count_df2 <- count_df2 %>%
# mutate(quartile = ntile(stem_counts, 4)) %>%
# filter(quartile==2)
#
# ggplot(count_df2, aes(reorder(stem, -stem_counts), stem_counts)) +
#   geom_bar(stat="identity") +
#   facet_wrap(~speaker_id) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
cum_df <- prov_all %>%
# group_by(child_id, speaker_code, stem) %>%
# filter(child_age==min(child_age)) %>%
# distinct(stem, .keep_all=TRUE) %>%
group_by(child_id, speaker_code, child_age) %>%
summarise(total_tokens = n()) %>%
group_by(child_id, speaker_code) %>%
arrange(child_age) %>%
mutate(cumulative=cumsum(total_tokens)) %>%
dplyr::select(-total_tokens)
# for top 10 (?) most frequent words in child's vocabulary, create graphs that track relative frequency (-log?) for both mother and child
#
# first get top 10 most frequent
# get cumulative across different ages
# filter by special words
# group by speaker, stem, get cumulative
#
# first bind child and mother tables
# Note: need to get these tables right so i don't have to do too many joins / bindings to start analysis. write down uses cases for now
#
# if i want to group age, i should do so now
prov_all <- prov_tokens %>%
dplyr::select(gloss, stem, child_id=speaker_id, child_age=speaker_age, speaker_code) %>%
rbind(prov_caregiver_tokens %>%
filter(speaker_code=="MOT") %>%
dplyr::select(gloss, stem, child_id=target_child_id, child_age=target_child_age, speaker_code)) %>%
filter(stem != '') %>%
mutate(child_age=floor(child_age/30))
cum_df <- prov_all %>%
# group_by(child_id, speaker_code, stem) %>%
# filter(child_age==min(child_age)) %>%
# distinct(stem, .keep_all=TRUE) %>%
group_by(child_id, speaker_code, child_age) %>%
summarise(total_tokens = n()) %>%
group_by(child_id, speaker_code) %>%
arrange(child_age) %>%
mutate(cumulative=cumsum(total_tokens)) %>%
dplyr::select(-total_tokens)
stem_df <- prov_all %>%
group_by(child_id, speaker_code, child_age, stem) %>%
summarise(stem_counts=n()) %>%
group_by(child_id, speaker_code, child_age) %>%
distinct(stem, .keep_all=TRUE) %>%
group_by(child_id, speaker_code, stem) %>%
arrange(child_age) %>%
mutate(cum_stem_counts=cumsum(stem_counts)) %>%
dplyr::select(-stem_counts)
comb_df <- left_join(cum_df, stem_df)
words <- count_df %>% ungroup() %>% dplyr::select(stem)
# note: it was interesting to not filter it and see general pattern
ggplot(comb_df %>% filter(child_id==child, stem %in% words$stem), aes(child_age, cum_stem_counts / cumulative, col=speaker_code)) +
geom_point() +
geom_smooth() +
facet_wrap(~stem) +
xlab("Age (months)") +
scale_y_continuous(limits=c(0, .075))
count_df <- prov_tokens %>%
filter(speaker_id==child, stem != '',  speaker_age / 30 < 3000) %>%
group_by(speaker_id, stem) %>%
summarise(stem_counts=n()) %>%
top_n(20, stem_counts) %>%
arrange(-stem_counts)
# ggplot(count_df, aes(reorder(stem, -stem_counts), stem_counts)) +
#   geom_bar(stat="identity") +
#   facet_wrap(~speaker_id) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
words <- count_df %>% ungroup() %>% dplyr::select(stem)
# note: it was interesting to not filter it and see general pattern
ggplot(comb_df %>% filter(child_id==child, stem %in% words$stem), aes(child_age, cum_stem_counts / cumulative, col=speaker_code)) +
geom_point() +
geom_smooth() +
facet_wrap(~stem) +
xlab("Age (months)") +
scale_y_continuous(limits=c(0, .075))
words <- count_df2 %>% ungroup() %>% dplyr::select(stem)
# note: it was interesting to not filter it and see general pattern
ggplot(comb_df %>% filter(child_id==child, stem %in% words$stem), aes(child_age, cum_stem_counts / cumulative, col=speaker_code)) +
geom_point() +
geom_smooth() +
facet_wrap(~stem) +
xlab("Age (months)") +
scale_y_continuous(limits=c(0, .075))
head(brown_tokens)
brown_tokens = read_csv('~/Documents/R/data/brown_tokens.csv')
head(brown_tokens)
p <- ggplot(adam_mother_df, aes(counted, cumulative)) +
geom_point() +
xlab("Number of types in each session") +
ylab("Cumulative number of types") +
ggtitle("Adam's mother")
adam_mother_df <- get_counted_vs_cumulative_df("Adam", "Mother")
get_counted_vs_cumulative_df <- function(child_name, role) {
tokens_by_speaker <- brown_tokens %>%
filter(target_child_name==child_name, speaker_role==role)
left_join(get_counted_df(tokens_by_speaker), get_cumulative_df(tokens_by_speaker))
}
get_counted_df <- function(tokens_by_speaker) {
result <- tokens_by_speaker %>%
group_by(target_child_name, transcript_id) %>%
distinct(stem, .keep_all=TRUE) %>%
summarise(counted=n())
result
}
get_cumulative_df <- function(tokens_by_speaker) {
result <- tokens_by_speaker %>%
group_by(speaker_id, stem) %>%
filter(transcript_id == min(transcript_id)) %>%
distinct(stem, .keep_all=TRUE) %>%
group_by(speaker_id, transcript_id) %>%
summarise(num_word_births = n()) %>%
rename(cumulative = num_word_births)
result$cumulative %<>% cumsum
result
}
adam_mother_df <- get_counted_vs_cumulative_df("Adam", "Mother")
eve_mother_df <- get_counted_vs_cumulative_df("Eve", "Mother")
sarah_mother_df <- get_counted_vs_cumulative_df("Sarah", "Mother")
p <- ggplot(adam_mother_df, aes(counted, cumulative)) +
geom_point() +
xlab("Number of types in each session") +
ylab("Cumulative number of types") +
ggtitle("Adam's mother")
multiplot(p,
grid.raster(readPNG(system.file("img", "/Users/alessandro/Desktop/adam.png", package="png")), height = .3, width = .3), cols = 2)
p <- ggplot(adam_mother_df, aes(counted, cumulative)) +
geom_point() +
xlab("Number of types in each session") +
ylab("Cumulative number of types") +
ggtitle("Adam's mother")
multiplot(p,
grid.raster(readPNG(system.file("img", "/Users/alessandro/Desktop/adam.png", package="png")), height = .3, width = .3), cols = 2)
library(knitr)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, cache = TRUE, fig.width=4, fig.height=4)
library(tidyverse)
library(ggplot2)
library(grid)
library(gridExtra)
library(magrittr)
library(png)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p <- ggplot(adam_mother_df, aes(counted, cumulative)) +
geom_point() +
xlab("Number of types in each session") +
ylab("Cumulative number of types") +
ggtitle("Adam's mother")
multiplot(p,
grid.raster(readPNG(system.file("img", "/Users/alessandro/Desktop/adam.png", package="png")), height = .3, width = .3), cols = 2)
install.packages("png")
library(knitr)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, cache = TRUE, fig.width=4, fig.height=4)
library(tidyverse)
library(ggplot2)
library(grid)
library(gridExtra)
library(magrittr)
library(png)
p <- ggplot(adam_mother_df, aes(counted, cumulative)) +
geom_point() +
xlab("Number of types in each session") +
ylab("Cumulative number of types") +
ggtitle("Adam's mother")
multiplot(p,
grid.raster(readPNG(system.file("img", "/Users/alessandro/Desktop/adam.png", package="png")), height = .3, width = .3), cols = 2)
p <- ggplot(adam_mother_df, aes(counted, cumulative)) +
geom_point() +
xlab("Number of types in each session") +
ylab("Cumulative number of types") +
ggtitle("Adam's mother")
#system.file("img", "/Users/alessandro/Desktop/adam.png", package="png")
multiplot(p,
grid.raster(readPNG("/Users/alessandro/Desktop/adam.png"), height = .3, width = .3), cols = 2)
p <- ggplot(adam_mother_df, aes(counted, cumulative)) +
geom_point() +
xlab("Number of types in each session") +
ylab("Cumulative number of types") +
ggtitle("Adam's mother")
#system.file("img", "/Users/alessandro/Desktop/adam.png", package="png")
# multiplot(p,
# grid.raster(readPNG("/Users/alessandro/Desktop/adam.png"), height = .3, width = .3), cols = 2)
ggplot(adam_mother_df, aes(counted, cumulative)) +
geom_point() +
xlab("Number of types in each session") +
ylab("Cumulative number of types") +
ggtitle("Adam's mother")
#system.file("img", "/Users/alessandro/Desktop/adam.png", package="png")
# multiplot(p,
# grid.raster(readPNG("/Users/alessandro/Desktop/adam.png"), height = .3, width = .3), cols = 2)
runApp('Github/shiny-app-childfreq')
